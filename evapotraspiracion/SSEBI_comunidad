######################################################################################################################################################################
################################################################ S-SEBI COMUNIDAD ####################################################################################
######################################################################################################################################################################

import ee
import geemap
from osgeo import gdal, osr
import netCDF4 as nc
import datetime
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import cm
from matplotlib.colors import Normalize
from scipy.interpolate import interpn
from sklearn.linear_model import LinearRegression
from scipy import interpolate
from pyproj import Proj
import rasterio as rio

#Authenticate and initialize GEE account (Valensatproject)
# api_key = 'AIzaSyCUxcmcRSHItYdxEyhs4Ak3tmUxT2WZlPo'
# ee.Authenticate()
ee.Initialize()
# Map = geemap.Map()

#Select period of interest 
start_date = '2022-07-13'
end_date = '2022-07-14'

#Boundaries
c_val = ee.FeatureCollection("projects/ee-valensatproject/assets/comunidad_valenciana").geometry()

varNameVIIRS = ['VNP21', 'VNP09GA', 'ERA5']
varProduct = ['LST', 'Emissivity', 'Albedo', 'NDVI']
varDate = start_date
# example_output_image_name_VNP21_LST = 'ET_' + varNameVIIRS[0] + '_' + varDate + varProduct[0] + '.tif'

####################################### Open the collection VNP21A1D: VIIRS Day Land Surface Temperature and Emissivity Daily 1km #######################################
#--------------------------------------------------------- Extract LST and EMISSIVITY -----------------------------------------------------------------------------------

#Open and filter the collection
#This product is already atmosferically corrected and cloud masked!
VIIRS_VNP21A1D = ee.ImageCollection("NOAA/VIIRS/001/VNP21A1D").filterDate(start_date, end_date).filterBounds(c_val)

# print("Number of images in the filtered collection:", VIIRS_VNP21A1D.size().getInfo())
# print("Projection:", VIIRS_VNP21A1D.first().projection().getInfo()['crs'])
# print("Scale:", VIIRS_VNP21A1D.first().projection().nominalScale().getInfo())

LST_band = VIIRS_VNP21A1D.first().select(['LST_1KM'])
Emissivity_band = VIIRS_VNP21A1D.first().select(['Emis_15', 'Emis_16']).reduce(ee.Reducer.median())

#Dowload the image
# geemap.ee_export_image(LST_band, filename= 'ET_' + varNameVIIRS[0] + '_' + varDate + '_' + varProduct[0] + '.tif', scale=1000, crs='EPSG:32632', region=c_val)
# geemap.ee_export_image(Emissivity_band, filename= 'ET_' + varNameVIIRS[0] + '_' + varDate + '_' + varProduct[1] + '.tif', scale=1000, crs='EPSG:32632', region=c_val)


#Select LST band
LST = rio.open('C://Users//1//Documents//GitHub//valensat_scripts//' + 'ET_' + varNameVIIRS[0] + '_' + varDate + '_' + varProduct[0] + '.tif').read(1)

plt.imshow(LST, 'gray')
plt.show()

# print("Mean LST:", np.nanmean(LST))
# print("Max LST:", np.nanmax(LST))
# print("Min LST:", np.nanmin(LST))

# # Mean LST: 194.5914648520375
# # Max LST: 335.0
# # Min LST: 0.0

#Select Emissivity band
Emissivity = rio.open('C://Users//1//Documents//GitHub//valensat_scripts//' + 'ET_' + varNameVIIRS[0] + '_' + varDate + '_' + varProduct[1] + '.tif').read(1)

# plt.imshow(Emissivity, 'gray')
# plt.show()

# print("Mean Emissivity:", np.nanmean(Emissivity))
# print("Max Emissivity:", np.nanmax(Emissivity))
# print("Min Emissivity:", np.nanmin(Emissivity))

# # Mean Emissivity: 0.5964793575458502
# # Max Emissivity: 0.988
# # Min Emissivity: 0.0


####################################### Open the collection VNP09GA: VIIRS Surface Reflectance Daily 500m and 1km ##############################################################
#------------------------------------------------------------ Calculate NDVI and ALBEDO ----------------------------------------------------------------------------------------

#Open and filter the collection
VIIRS_VNP09GA = ee.ImageCollection("NOAA/VIIRS/001/VNP09GA").filterDate(start_date, end_date).filterBounds(c_val)
print("Numero di immagini nella collezione filtrata:", VIIRS_VNP09GA.size().getInfo())

#Select my bands of interest and create a new image
VNP09GA_bands = VIIRS_VNP09GA.first().select(['M1', 'M2', 'M4', 'M5', 'M7', 'M10', 'M11', 'QF1','QF2'])

#Dowload the image
# geemap.ee_export_image(VNP09GA_bands, filename= 'ET_' + varNameVIIRS[1] + '_' + varDate + '_allBands.tif', scale=1000, crs='EPSG:4326', region=c_val)

VNP09GA = rio.open('C://Users//1//Documents//GitHub//valensat_scripts//' + 'ET_' + varNameVIIRS[1] + '_' + varDate + '_allBands.tif')

QF1 = VNP09GA.read(8)
# QF2 = VNP09GA.read(9)

# Apply quality filtering
bits = 5                              # Define number of bits
vals = list(range(0,(2**bits)))       # Generate a list of all possible bit values 
goodQF = []                           # Create an empty list used to store bit values where bits 2-3 = 0

for v in vals:  
    bitVal = format(vals[v],'b').zfill(bits) # Convert to binary based on values and # of bits defined above:
    if bitVal[1:3] not in ['10', '11']:                # Keep if bit 2-3 are not 2 or 3
    # if bitVal[1:3] != '11':                  # Keep if bit 2-3 != 3
        goodQF.append(vals[v])               # Append to list
        # print('\n' + str(vals[v]) + ' = ' + str(bitVal)) # print good quality values


def Apply_mask(image):
    image = np.ma.MaskedArray(image, np.in1d(QF1, goodQF, invert = True))
    return image

#Open the images and apply the mask
M1 = Apply_mask(VNP09GA.read(1))*0.0001
M2 = Apply_mask(VNP09GA.read(2))*0.0001
M4 = Apply_mask(VNP09GA.read(3))*0.0001
M5 = Apply_mask(VNP09GA.read(4))*0.0001
M7 = Apply_mask(VNP09GA.read(5))*0.0001
M10 = Apply_mask(VNP09GA.read(6))*0.0001
M11 = Apply_mask(VNP09GA.read(7))*0.0001

#NDVI calculation
# NDVI = (nir - red)/(nir + red)
NDVI = (M7 - M5)/(M7 + M5)

# print("Mean NDVI:", np.nanmean(NDVI))
# print("Max NDVI:", np.nanmax(NDVI))
# print("Min NDVI:", np.nanmin(NDVI))

# Mean NDVI: 0.1669853820663956
# Max NDVI: 0.8971578160059835
# Min NDVI: -0.6545265348595213

# # Water mask
# # NDVI[NDVI < 0] = [np.nan]
# # NDVI = NDVI

# plt.imshow(NDVI, 'gray')
# plt.show()

#ALBEDO calculation
albedo = (M1*0.0658704) + (M2*0.00745630) + (M4*0.316738) + (M5*0.212597) + (M7*0.218363) + (M10*0.110969) + (M11*0.0561668) + 0.00124913
albedo[albedo == 0.00124913] = [np.nan]
albedo = albedo

# print("Mean albedo:", np.nanmean(albedo))
# print("Max albedo:", np.nanmax(albedo))
# print("Min albedo:", np.nanmin(albedo))

# plt.imshow(NDVI, 'gray')
# plt.show()

# Mean albedo: 0.132900748369379
# Max albedo: 0.43793323081
# Min albedo: 0.013939079060000002


####################################### Open the collection VNP09GA: VIIRS Surface Reflectance Daily 500m and 1km ##############################################################
#------------------------------------------------------------------ Extract ERA5 data ------------------------------------------------------------------------------------------